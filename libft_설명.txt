memset 
- s가 가리키는 메모리 영역의 처음 n 바이트를 상수 바이트 c로 채 웁니다.

bzero
- s가 가리키는 메모리 영역에서 시작하여 메모리의 n바이트에 있는 데이터를 지웁니다.
- 해당 영역에 0('\0'을 포함하는 바이트)을 써서 s로 가리킵니다.

memcpy
- 메모리 영역 src에서 메모리 영역 dest로 n바이트를 복사합니다.
- 메모리 영역은 겹치지 않아야 합니다.
- 메모리 영역이 겹치는 경우 memmove를 사용해야 한다.
- 복사할 메모리랑, 복사 한 결과값을 붙여넣을 메모리가 겹쳐져 있다면 함수가 제대로 작동하지 않습니다

memccpy
- src 데이터를 n바이트의 데이터를 dest에 복제할 때에 src 데이터에서 문자 c를 만나면 c까지 복제하고 복제를 중단합니다. 
복제된 dest변수에서 복제가 끝난 다음 번지를 return합니다. 
만약 문자 c를 만나지 않았다면, n바이트를 복제하고 NULL을 return합니다.

isascii
- c가 7 비트 부호없는 문자인지 확인합니다.

isprint
- c가 출력할 수 있는 문자이면 0이 아닌 값을 반환

strnstr
- 함수는 종료전까지의 문자들 중 big 문자열 내에서 찾은 little 문자열 중 첫번째로 나온 결과를 찾는다. 
- 문자열은 최대 len의 수까지만 탐색한다.
const char big : 큰 문자열, 탐색할 전체 문자열
const char little : 작은 문자열, 추출해낼 부분 문자열
size_t len : big 문자열 내에서 탐색할 최대 범위

strchr
- 문자열 s에서 문자 c의 첫 번째 발생에 대한 포인터를 리턴합니다.

memmove 
https://hand-over.tistory.com/47
- src 메모리 영역에서 dest 메모리 영역으로 n 바이트를 복사합니다.
- 메모리 영역은 겹칠 수 있습니다. 복사는 src의 바이트가 src 또는 dest 
겹치지 않는 임시 배열로 먼저 복사 된 다음 임시 배열에서 dest로 복사되는 것처럼 발생

calloc 
- 배열을 0으로 채우는 것 
- nmeb - 배열 요소수
- size - 각 요소의 byte


-l 관련 
-> n보다 안전하고 일관적이며 오류가 발생하기 쉬운 대체품으로 설계
-> 버퍼의 전체 크기를 취하고 결과를 NUL 종료하도록 보장
-> C문자열에서만 작동
-> 함수가 만들려고 하는 문자열의 총 길이를 반환

strlcpy
- src는 NUL로 종료
- src의 길이

strlcat 
- src와 dst 모두 NUL로 종료
- src를 더한 dst의 초기 길이

strrchr
- 문자열 s에서 문자 c의 마지막 발생에 대한 포인터를 return 한다.

putendl_fd
- 문자열 s 출력후 newline으로 끝내기

substr
- 문자열 중 첫번째 인자(start)에서부터 두번째 인자(length)까지의 구간에 해당하는 문자열을 반환한다.
- start ~ start+length 까지의 문자열 반환
- start가 양수일 경우, 문자의 길이 보다 작으면 빈문자열이 리턴된다.

strjoin 
- s1과 s2를 연결한 결과물을 반환 
- 문자열 , 실패시 NULL 반환 

strtrim
- set에 포함된 문자들을 s1문자열에서 앞쪽과 뒤쪽에서 제거 후 복사본 반환, 실패시 NULL 
- strcpy대신 memcpy를 사용하는 이유는 속도차이 때문입니다.
- strcpy는 문자를 하나씩 읽어가며 확인하고 memcpy는 메모리 관점이라 속도차이가 난다